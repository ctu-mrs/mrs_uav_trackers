mrs_uav_trackers:

  mpc_tracker:

    mpc_loop:

      # when incoming uav_state rate is lower than this,
      # the MPC execution will be synchronized with the update() method
      synchronous_rate_limit: 30.0 # Hz

      # the rate of the asynchronous MPC loop
      asynchronous_loop_rate: 100.0 # rate of MPC calculation, >= 10 Hz

    diagnostics: # diagnostics publisher
      rate: 10                             # [Hz]
      position_tracking_threshold: 1.0     # [m] distance considered as "in place"
      orientation_tracking_threshold: 0.3  # [rad] orientation error considered as fine during tracking

    braking:
      enabled: true
      q_vel_braking: 2000.0
      q_vel_no_braking: 0.0

    # mrs collision avoidance
    collision_avoidance:

      trajectory_timeout: 1.0 # [s]
      inflation_radius: 1.0 # [m] if a collision is detected in (radius + inflation radius) the uav will start to slow down. Do not set this variable lower than 0.5
      altitude_threshold: 2.9 # [m]
      predicted_trajectory_publish_rate: 2 # [Hz]
      collision_horizontal_speed_coef: 0.25 # when collision detected, slow down during the manouver
      collision_slow_down_fully: 10 # when collision detected, slow down fully this number of steps before it
      collision_slow_down_start: 25 # when collision detected, start slowing down this number of steps before it
      collision_start_climbing: 25 # when avoiding, start climbing this number of steps before it

    model:

      translation:

        A: [1, 0.01, 0.00005,       0, 0,   0,        0,       0, 0,    0,       0,       0,
            0,    1,    0.01, 0.00005, 0,   0,        0,       0, 0,    0,       0,       0,
            0,    0,       1,    0.01, 0,   0,        0,       0, 0,    0,       0,       0,
            0,    0,       0,       1, 0,   0,        0,       0, 0,    0,       0,       0,
            0,    0,       0,       0, 1, 0.01, 0.00005,       0, 0,    0,       0,       0,
            0,    0,       0,       0, 0,    1,    0.01, 0.00005, 0,    0,       0,       0,
            0,    0,       0,       0, 0,    0,       1,    0.01, 0,    0,       0,       0,
            0,    0,       0,       0, 0,    0,       0,       1, 0,    0,       0,       0,
            0,    0,       0,       0, 0,    0,       0,       0, 1, 0.01, 0.00005,       0,
            0,    0,       0,       0, 0,    0,       0,       0, 0,    1,    0.01, 0.00005,
            0,    0,       0,       0, 0,    0,       0,       0, 0,    0,       1,    0.01,
            0,    0,       0,       0, 0,    0,       0,       0, 0,    0,       0,       1]

        B: [0, 0, 0,
            0, 0, 0,
            0, 0, 0,
            0.01, 0, 0,
            0, 0, 0,
            0, 0, 0,
            0, 0, 0,
            0, 0.01, 0,
            0, 0, 0,
            0, 0, 0,
            0, 0, 0,
            0, 0, 0.01]

      heading:

        A: [1, 0.01, 0.00005,       0,
            0,    1,    0.01, 0.00005,
            0,    0,       1,    0.01,
            0,    0,       0,       1]

        B: [0,
            0,
            0,
            0.01]

    mpc_solver:

      # dt1: 0.01 # dt1 is set as 1/main_rate
      dt2: 0.2

      xy:
        verbose: false
        max_n_iterations: 40
        Q: [5000, 0, 0, 0]

      z:
        verbose: false
        max_n_iterations: 40
        Q: [5000, 0, 0, 0]

      heading:
        verbose: false
        max_n_iterations: 40
        Q: [5000, 0, 0, 0]
